// Copyright 2020 Harald Albrecht.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy
// of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// This program generates defs_version.go with version information queried from
// git.

package main

import (
	"fmt"
	"html/template"
	"os"
	"os/exec"
	"regexp"
)

const semVerPattern = `(\d+\.\d+\.\d+(-\d+(-[a-z0-9]+))?)`

var versionExtractor = regexp.MustCompile(`^v` + semVerPattern + `\n?$`)
var branchVersionExtractor = regexp.MustCompile(`^release/v` + semVerPattern + `\n?$`)

var defsVersionGoTemplate = template.Must(template.New("defs_version.go").Parse(
	`// Let goreportcard check us.
// Code generated by gen_version; DO NOT EDIT.
package lxkns

// SemVersion is the semantic version string of the lxkns module.
const SemVersion = "{{ . }}"
`))

func main() {
	var version string
	// Are we on a git-flow release branch?
	out, err := exec.Command("git", "branch", "--show-current").Output()
	if err != nil {
		panic(err)
	}
	if match := branchVersionExtractor.FindStringSubmatch(string(out)); match != nil {
		version = match[1]
	} else {
		out, err = exec.Command("git", "describe").Output()
		if err != nil {
			panic(err)
		}
		match := versionExtractor.FindStringSubmatch(string(out))
		if match == nil {
			panic(fmt.Sprintf("error: invalid version %q", string(out)))
		}
		version = match[1]
	}
	fmt.Printf("defs_version.go: version %q\n", version)
	f, err := os.Create("defs_version.go")
	if err != nil {
		panic(err)
	}
	defer func() { _ = f.Close() }()
	if err := defsVersionGoTemplate.Execute(f, version); err != nil {
		panic(err)
	}
}
