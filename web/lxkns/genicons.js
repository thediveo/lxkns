// Copyright 2021 by Harald Albrecht.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy
// of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.

// generates Typescript Material-UI <SvgIcon>s from icons/**/*.svg and writes
// them to src/icons/**/*.tsx files.
const sourcedir = 'icons'
const destdir = 'src/icons'

const glob = require('glob')
const fs = require('fs')
const path = require('path')
const { default: svgr } = require('@svgr/core')
const {
    identifier,
    jsxClosingElement,
    jsxElement,
    jsxIdentifier,
    jsxOpeningElement,
    jsxSpreadAttribute,
} = require('@babel/types')

glob.sync(path.join(sourcedir, '**/*.svg'))
    .map(srcicon => {
        const dsticon = path.join(destdir, path.relative(sourcedir, srcicon))
            .replace(/\.svg$/, '.tsx')
        console.log(srcicon, '-->', dsticon)
        svgicon = fs.readFileSync(srcicon)
        const tsxicon = svgr.sync(svgicon, {
            dimensions: false,
            typescript: true,
            plugins: [
                '@svgr/plugin-svgo',
                '@svgr/plugin-jsx',
            ],
            // Apply custom transformations, to get rid of some path attributes
            // we don't want to ever show up in our icons; for the general
            // configuration, see also:
            // https://github.com/gregberge/svgr/tree/master/packages/plugin-jsx
            jsx: {
                babelConfig: {
                    plugins: [
                        [
                            '@svgr/babel-plugin-remove-jsx-attribute', {
                                'elements': ['svg', 'circle', 'rect', 'path'],
                                'attributes': ['width', 'height', 'color', 'overflow', 'style'],
                            }
                        ],
                    ],
                },
            },
            template: ({ template }, _, { componentName, jsx }) => {
                // This is our template function for specifically rendering to
                // our needs:
                // - only "inner" SVG elements, without the outer <svg> element;
                //   we're going to use <SvgIcon> to wrap everything.
                // - we're passing the properties to the <SvgIcon>.
                const typeScriptTpl = template.smart({ plugins: ['typescript'] })
                const comment = `// autogenerated from icon svg file${srcicon ? ` "${srcicon}"` : ''}, do not edit`
                const wrappedJSX = jsxElement(
                    jsxOpeningElement(jsxIdentifier('SvgIcon'), [jsxSpreadAttribute(identifier('props'))]),
                    jsxClosingElement(jsxIdentifier('SvgIcon')),
                    jsx.children, // skips the outer <svg> on purpose!
                    false)
                return typeScriptTpl.ast`${comment}
import * as React from 'react'
import { SvgIcon, SvgIconProps } from '@mui/material'

export const ${componentName} = (props: SvgIconProps) => ${wrappedJSX}

export default ${componentName}
`
            },
        }, {
            // Give more sensible component names, directly derived from the
            // original .svg filename in CamelCase (and as opposed to svgr's
            // very opinionated camelCasing). 
            componentName: path.basename(srcicon, '.svg') + 'Icon',
        })
        const dirname = path.dirname(dsticon)
        fs.mkdirSync(dirname, {recursive: true})
        fs.writeFileSync(dsticon, tsxicon)
    })
